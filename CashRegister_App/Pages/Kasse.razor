@page "/"
@using System.Linq;
@using CashRegister.Models
@using CashRegister.DAL
@using CashRegister_App.Data
@using CashRegister_App.Pages.Dialogs
@using CashRegister_DAL.DataAccessLayer
@using System.Net.Sockets
@using System.Net
@using System.Text

@inject IDialogService DialogService
@inject ISnackbar Snackbar

@*Button zum auswählen ob man die Kategorien von der Sennerei oder von der Gastro sehen will*@
<div class="body">
    <MudTabs Elevation="2" Rounded="true" Centered="true" >
        <MudTabPanel OnClick="getSennerei" Icon="@Icons.Filled.IncompleteCircle" Text="Sennerei" />
        <MudTabPanel OnClick="getGastro" Icon="@Icons.Filled.FoodBank" Text="Gastro" />
    </MudTabs>
</div>

<table>

    <tr valign="top">

        <td>
            @*Grid wird erstellt indem alle Papers reingepackt werden*@
            <MudGrid Style="width: 1120px; margin-top: 20px">
                <MudItem xs="14" Style="margin-top: 20px;">
                    <MudGrid>
                        @*Für die Anzahl von dem int papers werden jetzt Papers erstellt (z.b papers = 4 Es werden dan 4 Paper erstellt)*@
                        @foreach (var kategorie in kategorien)
                        {
                            //Hier werden Die Papers errstellt mit einer bestimten Größe(xs)
                            <MudItem xs="14" Style="width: 243.8px; height: 96px; margin-top: 20px; margin-left: 20px;">
                                <MudPaper @onclick="() => kategorieClick(kategorie)" Style=" background-color:#c9caee; width: 243.8px; height: 96px;" Class="d-flex flex-column align-center justify-center mud-width-full py-8">
                                    <MudText Typo="Typo.h6">@kategorie.KategorieName</MudText>
                                </MudPaper>
                            </MudItem>
                        }
                    </MudGrid>
                </MudItem>
            </MudGrid>

            <MudDivider Style="margin-left: 20px; margin-top: 65px; width: 1035px; background-color: black;"></MudDivider>
            @if (isLoaded)
            {
                <MudGrid Style="width: 1120px;">
                    <MudItem xs="14" Style="margin-top: 20px;">
                        <MudGrid>
                            @*Für die Anzahl von dem int papers werden jetzt Papers erstellt (z.b papers = 4 Es werden dan 4 Paper erstellt)*@
                            @foreach (var produkt in produkte)
                            {
                                //Hier werden Die Papers errstellt mit einer bestimten Größe(xs)
                                <MudItem xs="14" Style="width: 243.8px; height: 96px; margin-top: 20px; margin-left: 20px;">
                                    <MudButton @onclick="() => produktClick(produkt)" Style=" background-color: #c9caee; width: 243.8px; height: 96px;" Class="d-flex flex-column align-center justify-center mud-width-full py-8">
                                        <MudText Typo="Typo.h6">@produkt.Name</MudText>
                                    </MudButton>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudItem>
                </MudGrid>
            }
        </td>

        <td>
            <MudDataGrid T="EinkaufsPosition" ReadOnly="false"  Elevation="0" FixedHeader="true" Height="700px" Style=" width: 512px; border: solid 0.5pt; border-color:lightslategray;" Items="@einkaufsPositionen">
                <Columns>
                    <Column T="EinkaufsPosition" StickyLeft="true">
                        <CellTemplate>
                            <MudIconButton OnClick="() => DeleteEinkaufsPosition(context.Item)" Icon="@Icons.Material.Outlined.DeleteForever" Size="@Size.Large" Color="@Color.Error" />
                        </CellTemplate>
                    </Column>
                    <Column T="EinkaufsPosition" Title="Menge/Gramm" Field="Anzahl" />
                    <Column T="EinkaufsPosition" Title="Bezeichung" Field="ProduktName" />
                    <Column T="EinkaufsPosition" Title="CHF" Field="ZwischenPreisRound" />
                </Columns>
            </MudDataGrid>

            <p>
                <MudTextField @bind-Value="@Gesamtpreis" ReadOnly="true" Label="Gesamtpreis" Margin="Margin.None"   Adornment="Adornment.End" AdornmentText="CHF" Variant="Variant.Outlined" style="margin-top: 10px;"></MudTextField>
                <MudFab Label="Kassa Öffnen" OnClick="createBeleg" Style="background-color: #c9caee; width: 250px; margin-top: 20px; margin-left: 85px" />
            </p>

        </td>

    </tr>

</table>

@code {

    static CashRegisterContextDB context = new CashRegisterContextDB();
    EinkaufsPositionDAL einkaufsPositionDAL = new EinkaufsPositionDAL(context);
    public List<EinkaufsPosition> einkaufsPositionen = new List<EinkaufsPosition>();
    BelegDAL belegDAL = new BelegDAL(context);
    PrintService printService = new PrintService(context);
    static List<Kategorie> kategorien = context.Kategorie.Where(x => x.MandantId == 2).ToList();
    static List<Produkt> produkte = context.Produkt.ToList();
    MudMessageBox Belegbox { get; set; }

    public decimal mengenPreis = 0;
    public int GrammAnzahl = 0;
    decimal Gesamtpreis = 0;
    bool isLoaded = false;

    public List<String> getKategorien
    {
        get
        {
            return kategorien.Select(x => x.KategorieName).ToList();
        }
        set { }
    }

    void DeleteEinkaufsPosition(EinkaufsPosition einkaufsPosition)
    {
        einkaufsPositionen.Remove(einkaufsPosition);
        Gesamtpreis = belegDAL.GetGesamtPreis(einkaufsPositionen);
    }

    async void createBeleg()
    {
        if(einkaufsPositionen.Count == 0)
        {
            Snackbar.Add("Bitte ein Produkt zum Kauf auswählen!", Severity.Error);
        }
        else
        {
            string gegebenesGeld = await OpenDialog();                  //warten auf Rückgeld vom Dialog
            belegDAL.Create(einkaufsPositionen);                          //Beleg wird erstellt
            printService.PrintBeleg(einkaufsPositionen, gegebenesGeld);   //Beleg wird gedruckt

            context.SaveChanges();
            einkaufsPositionen.Clear();
            Gesamtpreis = 0;
        }
    }

    public void kategorieClick(Kategorie kategorie)
    {
        isLoaded = true;
        produkte = context.Produkt.Where(x => x.Kategorie == kategorie && x.Deaktiviert == false).ToList();
    }

    public void produktClick(Produkt produkt)
    {
        // EInkaufsposition suchen oder neu erstellen
        EinkaufsPosition einkaufsPosition = einkaufsPositionen.Find(x => x.Produkt.Id == produkt.Id);
        if (einkaufsPosition == null)
        {
            einkaufsPositionDAL.Create(0, produkt, einkaufsPositionen);
            einkaufsPosition = einkaufsPositionen.Find(x => x.Produkt.Id == produkt.Id);
        }

        //Wenn es KG/CHF ist wird ein dialog erstellt sonst wird nur die anzahle erhöht
        if (produkt.Preisart)
        {
            var parameters = new DialogParameters { ["einkaufsPosition"] = einkaufsPosition };  //Parameter erstellen

            DialogService.Show<MengeDialog>("Gramm/Produkt", parameters);                       //Dialog wird aufgerufen 
        }
        else
        {
            einkaufsPosition.Anzahl++;
        }
        Gesamtpreis = Math.Round(belegDAL.GetGesamtPreis(einkaufsPositionen), 2); //Gesamtpreis wird gerundet
    }

    //Holt alle Kategorien die zum Mandant Gastro gehören
    public void getGastro()
    {
        kategorien = context.Kategorie.Where(x => x.MandantId == 1).ToList();
    }

    //Holt alle Kategorien die zum Mandant Sennerei gehören
    public void getSennerei()
    {
        kategorien = context.Kategorie.Where(x => x.MandantId == 2).ToList();
    }

    async  Task<string> OpenDialog()
    {
        //Parameter für Dialog werden erstellt
        var parameters = new DialogParameters { ["Gesamtpreis"] = Math.Round(belegDAL.GetGesamtPreis(einkaufsPositionen), 2), ["Gegeben"] = Math.Round(belegDAL.GetGesamtPreis(einkaufsPositionen), 2)};
        
        //Dialog wid erstellt
        var dialog = DialogService.Show<DialogGegeben>("Geld Erhalten", parameters);
        
        //auf ergebniss warten
        var result = await dialog.Result;
      
        return result.Data.ToString();
    }
}