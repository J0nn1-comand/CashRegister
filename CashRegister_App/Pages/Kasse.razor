@page "/"
@using System.Linq;
@using CashRegister.Models
@using CashRegister.DAL
@using CashRegister_DAL.DataAccessLayer
@using System.Net.Sockets
@using System.Net
@using System.Text

@*Button zum auswählen ob man die Kategorien von der Sennerei oder von der Gastro sehen will*@
<div class="body">
    <MudTabs Elevation="2" Rounded="true" Centered="true">
        <MudTabPanel OnClick="getSennerei" Icon="@Icons.Filled.IncompleteCircle" Text="Sennerei" />
        <MudTabPanel OnClick="getGastro" Icon="@Icons.Filled.FoodBank" Text="Gastro" />
    </MudTabs>
</div>

<table>
    <tr valign="top">
        <td>
            @*Grid wird erstellt indem alle Papers reingepackt werden*@
            <MudGrid Style="width: 1120px; margin-top: 20px">
                <MudItem xs="14" Style="margin-top: 20px;">
                    <MudGrid >
                        @*Für die Anzahl von dem int papers werden jetzt Papers erstellt (z.b papers = 4 Es werden dan 4 Paper erstellt)*@
                        @foreach (var kategorie in getKategorien)
                        {
                            //Hier werden Die Papers errstellt mit einer bestimten Größe(xs)
                            <MudItem xs="14" Style="width: 243.8px; height: 96px; margin-top: 20px; margin-left: 20px;">
                                <MudPaper @onclick="() => kategorieClick(kategorie)" Style=" background-color:#c9caee; width: 243.8px; height: 96px;" Class="d-flex flex-column align-center justify-center mud-width-full py-8">
                                    <MudText Typo="Typo.h6">@kategorie</MudText>
                                </MudPaper>
                            </MudItem>
                        }
                    </MudGrid>
                </MudItem>
            </MudGrid>
            <MudDivider Style="margin-left: 20px; margin-top: 65px; width: 1035px; background-color: black;"></MudDivider>
            @if (isLoaded)
            {
                <MudGrid Style="width: 1120px;">
                    <MudItem xs="14" Style="margin-top: 20px;">
                        <MudGrid>

                            @*Für die Anzahl von dem int papers werden jetzt Papers erstellt (z.b papers = 4 Es werden dan 4 Paper erstellt)*@
                            @foreach (var produkt in Produkte)
                            {
                                //Hier werden Die Papers errstellt mit einer bestimten Größe(xs)
                                <MudItem xs="14" Style="width: 243.8px; height: 96px; margin-top: 20px; margin-left: 20px;">
                                    <MudButton @onclick="() => produktClick(produkt)" Style=" background-color: #c9caee; width: 243.8px; height: 96px;" Class="d-flex flex-column align-center justify-center mud-width-full py-8">
                                        <MudText Typo="Typo.h6">@produkt.Name</MudText>
                                    </MudButton>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudItem>
                </MudGrid>
            }
           
        </td>

        <td>
            @*Unten rechst vom Bildschirm wird der jetzige Beleg angezeigt*@
            <MudPaper Height="450px" Width="400px" Square="true" Class="rounded" Style="  background-color: #f0f0f0; margin-left: 100px; margin-top: 80%;">
              
                    <span class="groseschrif"><pre>Total:      €801.00</pre></span>
                    <MudDivider Style="margin-top: 20px;"/>
                    <span class="groseschrif"><pre>Gegeben:    €900.00</pre></span>
                    <span class="groseschrif"><pre>Rückgeld:    €99.00</pre></span>

                <MudFab Label="Kassa Öffnen" OnClick="createBeleg" Style="background-color: #c9caee; width: 250px; margin-top: 50px; margin-left: 85px" />
                </MudPaper>
        </td>
    </tr>
</table>

@code {
    static CashRegisterContextDB context = new CashRegisterContextDB();
    EinkaufsPositionDAL einkaufsPositionData = new EinkaufsPositionDAL(context);
    BelegDAL belegData = new BelegDAL(context);

    List<EinkaufsPosition> einkaufsposition = new List<EinkaufsPosition>();
    static List<Kategorie> kategorien = context.Kategorie.ToList();
    static List<Produkt> Produkte = context.Produkt.ToList();

    int Anzahl = 0;
    bool isLoaded = false;
    int papers = kategorien.Count; // anzahl der grid items

    public List<String> getKategorien {
        get{
            return kategorien.Select(x => x.KategorieName).ToList();
        }
        set { }
    }



    void createBeleg()
    {

        belegData.Create(einkaufsposition);
        context.SaveChanges();
        einkaufsposition.Clear();
        List<DirectPrintingScript> testprint = new List<DirectPrintingScript>();

        foreach (var item in einkaufsposition)
        {
            DirectPrintingScript printingScript = new DirectPrintingScript
            {
                Value = item.Produkt.Name,
                PrintMethodID = item.Produkt.Id,
                IsNeedPrint = true
            };
            testprint.Add(printingScript);
        }
       
        print(testprint, "10.204.44.123",001);

    }
    public class DirectPrintingScript
    {
        public string Value { get; set; }
        public int PrintMethodID { get; set; }
        public bool IsNeedPrint { get; set; }
    }

    //--print method
    public void print(List<DirectPrintingScript> result, string IP, int Port)
    {
        var job = new DirectPrinterProcess();
        Socket clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
        clientSocket.NoDelay = true;

        IPAddress ip = IPAddress.Parse(IP);
        IPEndPoint ipep = new IPEndPoint(ip, Port);
        clientSocket.Connect(ipep);
        Encoding enc = Encoding.ASCII;

        foreach (DirectPrintingScript item in result)
        {
            var command = job.SelectMethod(item.PrintMethodID);
            byte[] commandBytes = Encoding.ASCII.GetBytes(command);
            byte[] contentBytes = Encoding.ASCII.GetBytes(item.Value);
            clientSocket.Send(commandBytes);

            if (item.IsNeedPrint)
            {
                clientSocket.Send(contentBytes);
                var n = job.NewLine();
                byte[] nBytes = Encoding.ASCII.GetBytes(n);
                clientSocket.Send(nBytes);
            }
        }

        // Line feed hexadecimal values
        byte[] bEsc = new byte[4];
        bEsc[0] = 0x0A;
        bEsc[1] = 0x0A;
        bEsc[2] = 0x0A;
        bEsc[3] = 0x0A;

        // Send the bytes over
        clientSocket.Send(bEsc);

        clientSocket.Close();
    }

    //--print method process
    public class DirectPrinterProcess
    {
        public string SelectMethod(int MethodID)
        {
            switch (MethodID)
            {
                case 1:
                    return JustificationCenter();
                case 2:
                    return JustificationLeft();
                case 3:
                    return DoubleHeight();
                case 4:
                    return DoubleWidth();
                case 5:
                    return CancelDoubleHeightWidth();
                case 6:
                    return SetColorRed();
                case 7:
                    return SetColorBlack();
                default:
                    return CancelDoubleHeightWidth();
            }
        }

        private string JustificationCenter()
        {
            return "" + (char)27 + (char)97 + (char)1;
        }

        private string JustificationLeft()
        {
            return "" + (char)27 + (char)97 + (char)0;
        }

        private string DoubleHeight()
        {
            return "" + (char)27 + (char)33 + (char)16;
        }

        private string DoubleWidth()
        {
            return "" + (char)27 + (char)33 + (char)32;
        }

        private string CancelDoubleHeightWidth()
        {
            return "" + (char)27 + (char)33 + (char)0;
        }

        private string SetColorRed()
        {
            return "" + (char)27 + (char)114 + (char)1;
        }

        private string SetColorBlack()
        {
            return "" + (char)27 + (char)114 + (char)0;
        }

        public string NewLine()
        {
            return "" + "\n";
        }
    }

    void UpdateBreaks(int index, int changeamount)
    {
        int newbreaks = 2; 
        newbreaks += changeamount;

        StateHasChanged();
    }

    public void kategorieClick(string kategorie)
    {
        isLoaded = true;
        Produkte = context.Produkt.Where(x => x.Kategorie.KategorieName == kategorie).ToList();
    }

    public void produktClick(Produkt produkt)
    {
        if (einkaufsPositionData.CheckIfAdded(produkt, einkaufsposition))
        {
            Anzahl++;
        }
        else
        {
            Anzahl = 1;
            EinkaufsPosition einkaufsPosition = new EinkaufsPosition
                {
                    Anzahl = Anzahl,
                    Produkt = produkt,
                };
            einkaufsposition.Add(einkaufsPosition);

            //  context.SaveChanges();
            
        }

    }

    public void getGastro()
    {
        isLoaded = false;
        kategorien = context.Kategorie.Where(x => x.MandantId == 1).ToList();
    }

    public void getSennerei()
    {
        isLoaded = false;
        kategorien = context.Kategorie.Where(x => x.MandantId == 2).ToList();
    }

 
}