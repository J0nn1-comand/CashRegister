@page "/verlauf"
@using CashRegister.DAL
@using CashRegister.Models
@using CashRegister_DAL.DataAccessLayer
@using System.Data
@using CashRegister_Models.Models
@using Microsoft.Win32
@using System.Text
@using System.IO
@inject IJSRuntime JS

<script suppress-error="BL9992" src="js/dowloadutil.js"></script>

<div class="body">
    <MudTabs Elevation="2" Rounded="true" Centered="true">
        <MudTabPanel OnClick="@(e => ChooseTableItems(2))" Icon="@Icons.Filled.IncompleteCircle" Text="Sennerei" />
        <MudTabPanel OnClick="@(e => ChooseTableItems(1))" Icon="@Icons.Filled.FoodBank" Text="Gastro" />
        <MudTabPanel OnClick="@(e => ChooseTableItems(3))" Icon="@Icons.Filled.FoodBank" Text="Alle Belege" />
    </MudTabs>
</div>
    

<table>
    <tr valign="top">
        <td>
            @*Datagrid wird erstellt*@
            <MudDataGrid  Style="width: 1100px;" T="ModelVerlauf" Items="@verlaufList" >
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Belege</MudText>
                    <MudSpacer />
                    @*In der Toolbar ist noch ein Datepicker wo man ein Zeitraum(von bis) auswählen kann*@
                    <MudDateRangePicker Label="Basic range picker" @bind-DateRange="_dateRange" />
                </ToolBarContent>
                
                @*Spalten werden erstellt*@
                <Columns >
                    <Column T="ModelVerlauf" Field="@nameof(ModelVerlauf.ProduktName)" />
                    <Column T="ModelVerlauf" Field="@nameof(ModelVerlauf.Gesamtpreis)" />
                    <Column T="ModelVerlauf" Field="@nameof(ModelVerlauf.Anzahl)" />
                </Columns>
            </MudDataGrid>

            <MudFab OnClick="@DownloadFileFromStream" StartIcon="@Icons.Filled.Download" Label="Belege Herunterladen" Class="py-4 px-6 mx-4 rounded-b-xl" Style="margin-right: 400px; margin-bottom:10px;" />
        </td>

        <td>
            <MudPaper Height="@SetHeight()" Width="500px" Square="true" Class="rounded" Style="position:fixed; background-color: #f0f0f0; margin-bottom: 20px; margin-left: 17px;">
                @for (int i = 1; i < (produktAnzahl + 1); i++)
                {
                    <span class="labelclass"><pre>@i.  Thüringer Klöse  x[Anzahl]    [Preis * Anzahl]€ </pre></span>  
                }
                <MudDivider Style="margin-top: 20px;"/>
                <span class="gesamtPreisClass"><pre>Gesamtpreis: [GesamtPreis]€</pre></span>
            </MudPaper>
        </td>
    </tr>
</table>

@code {
    static CashRegisterContextDB context = new CashRegisterContextDB();
    VerlaufDAL verlaufData = new VerlaufDAL(context);
    List<ModelVerlauf> verlaufList = new List<ModelVerlauf>();
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    List<Beleg> einkaeufe = context.Beleg.ToList();
    List<Produkt> Produkte = context.Produkt.ToList();

    public bool AlarmOn { get; set; }
    private string _searchString;
    int produktAnzahl = 15; // anzahl der Produkte
    private int containerContent = 1;
    string ProduktName;
    int ProduktAnzahl;
    decimal ProduktPreis;






    string ChooseTableItems(int containerContent)
    {
         @switch (containerContent)
        {
            case 1:
                verlaufList.Clear();
                verlaufList = CreateVerlaufList(containerContent);
                break;

            case 2:
                verlaufList.Clear();
                verlaufList = CreateVerlaufList(containerContent);
                break;

            case 3:
                verlaufList.Clear();
                verlaufList = CreateVerlaufList(containerContent);
                break;
        }
        return "";
    }

    string SetHeight()
    {
        return ((140 +(produktAnzahl * 37)) + "px"); 
    }

    //Kann man in eine Andere Klasse tun und nicht hier ist nur temporär (Einkaufsposition Klasse) 
    int ZwischenPreis(int Anzahl, int Preis)
    {
        int Ergebniss = Preis * Anzahl;
        return Ergebniss;
    }

    //Kann man in eine Andere Klasse tun und nicht hier ist nur temporär
    int GesamtPreis()
    {
        int Ergebniss = 0;
        return Ergebniss;
    }

    public List<ModelVerlauf> CreateVerlaufList(int containerContent)
    {
        if (containerContent == 1 || containerContent == 2)
        {
            return verlaufData.Create(verlaufData.GetProduktCountMandant(containerContent, _dateRange.Start, _dateRange.End), verlaufList);
        }
        return verlaufData.Create(verlaufData.GetProduktCountAll(_dateRange.Start, _dateRange.End), verlaufList);
    }

    private async Task DownloadFileFromStream()
    {
        @switch (containerContent)
        {
            case 1:
                FileDownload();
                break;

            case 2:
                FileDownload();
                break;

            case 3:
                FileDownload();
                break;
        }

    }
    private async Task FileDownload()
    {
        string csvString = "Produkt Name;Gesampreis;Anzahl der Produkte;\n";
        foreach (var item in verlaufList)
        {
            csvString = csvString + item.ProduktName + ";" + item.Gesamtpreis + ";" + item.Anzahl + "\n";
        }
        var fileStream = new MemoryStream(Encoding.ASCII.GetBytes(csvString));

        var filename = "Beleg.csv";
        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", filename, streamRef);
    }
}


