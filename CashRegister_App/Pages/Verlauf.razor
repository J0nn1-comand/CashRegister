@page "/verlauf"
@using CashRegister.DAL
@using CashRegister.Models
@using CashRegister_DAL.DataAccessLayer
@using System.Data
@using Microsoft.Win32
@using System.Text
@using System.IO
@inject IJSRuntime JS

<script suppress-error="BL9992" src="js/dowloadutil.js"></script>

<table>
    <tr valign="top">
        <td>
            @*Datagrid wird erstellt*@
            <MudDataGrid Style="width: 1100px;" Items="@einkaeufe" QuickFilter="@_quickFilter">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Belege</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Placeholder="Search"  Adornment="Adornment.Start" Immediate="true"AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                
                @*Spalten werden erstellt*@
                <Columns >
                    <Column T="Beleg" Field="@nameof(Beleg.Belegnummer)"/>
                    <Column T="Beleg" Field="@nameof(Beleg.Kaufdatum)"/>
                    <Column T="Beleg" Field="@nameof(Beleg.Gesamtpreis)"/>
                </Columns>
            </MudDataGrid>

            <MudFab OnClick="@DownloadFileFromStream" StartIcon="@Icons.Filled.Download" Label="Belege Herunterladen" Class="py-4 px-6 mx-4 rounded-b-xl" Style="margin-right: 400px; margin-bottom:10px;" />
        </td>

        <td>
            <MudPaper Height="@SetHeight()" Width="500px" Square="true" Class="rounded" Style="position:fixed; background-color: #f0f0f0; margin-bottom: 20px; margin-left: 17px;">
                @for (int i = 1; i < (produktAnzahl + 1); i++)
                {
                    <span class="labelclass"><pre>@i.  Thüringer Klöse  x[Anzahl]    [Preis * Anzahl]€ </pre></span>  
                }
                <MudDivider Style="margin-top: 20px;"/>
                <span class="gesamtPreisClass"><pre>Gesamtpreis: [GesamtPreis]€</pre></span>
            </MudPaper>
        </td>
    </tr>
</table>

@code {
    static CashRegisterContextDB context = new CashRegisterContextDB();
    public bool AlarmOn { get; set; }
    private string _searchString;
    int produktAnzahl = 15; // anzahl der Produkte
    List<Beleg> einkaeufe = context.Beleg.ToList();
    List<Produkt> Produkte = context.Produkt.ToList();

    string SetHeight()
    {
        return ((140 +(produktAnzahl * 37)) + "px"); 
    }

    //Kann man in eine Andere Klasse tun und nicht hier ist nur temporär (Einkaufsposition Klasse) 
    int ZwischenPreis(int Anzahl, int Preis)
    {
        int Ergebniss = Preis * Anzahl;
        return Ergebniss;
    }

    //Kann man in eine Andere Klasse tun und nicht hier ist nur temporär
    int GesamtPreis()
    {
        int Ergebniss = 0;
        return Ergebniss;
    }

    private Func<Beleg, bool> _quickFilter => x =>
    {
       if (string.IsNullOrWhiteSpace(_searchString))
           return true;

       if ($"{x.Belegnummer} {x.Kaufdatum} {x.Gesamtpreis}".Contains(_searchString))
           return true;
           return false;
    };

    private async Task DownloadFileFromStream()
    {
        string csvString = "Id;Name;Preis;\n";
        foreach (var item in Produkte)
        {
            csvString = csvString + item.Id + ";" + item.Name + ";" + item.Preis + "\n";
        }
        var fileStream = new MemoryStream(Encoding.ASCII.GetBytes(csvString));

        var filename = "Beleg.csv";
        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", filename, streamRef);
    }
}


