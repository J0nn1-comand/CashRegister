@page "/verlauf"
@using CashRegister.DAL
@using CashRegister.Models
@using CashRegister_App.Data
@using CashRegister_App.Pages.Dialogs
@using CashRegister_DAL.DataAccessLayer
@using System.Data
@using CashRegister_Models.Models
@using Microsoft.Win32
@using System.Text
@using System.IO
@inject IJSRuntime JS
@inject IDialogService DialogService
@using System.Drawing.Printing;

<script suppress-error="BL9992" src="js/dowloadutil.js"></script>

<div class="body">
    <MudTabs Elevation="2" Rounded="true" Centered="true">
        <MudTabPanel OnClick="@(e => ChooseTableItems(2))" Icon="@Icons.Filled.IncompleteCircle" Text="Sennerei" />
        <MudTabPanel OnClick="@(e => ChooseTableItems(1))" Icon="@Icons.Filled.FoodBank" Text="Gastro" />
        <MudTabPanel OnClick="@(e => ChooseTableItems(3))" Icon="@Icons.Filled.List" Text="Gesamt" />
    </MudTabs>
</div>
    

<table>
    <tr valign="top">
        <td>
            @*Datagrid wird erstellt*@
            <MudDataGrid  Style="width: 1100px;" T="ModelVerlauf" Items="@verlaufList" >
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Belege</MudText>
                    <MudSpacer />
                    @*In der Toolbar ist noch ein Datepicker wo man ein Zeitraum(von bis) auswählen kann*@
                    <MudDateRangePicker Label="Basic range picker" @bind-DateRange="_dateRange" />
                </ToolBarContent>
                
                @*Spalten werden erstellt*@
                <Columns >
                    <Column T="ModelVerlauf" Field="@nameof(ModelVerlauf.ProduktName)" />
                    <Column T="ModelVerlauf" Field="@nameof(ModelVerlauf.Gesamtpreis)" />
                    <Column T="ModelVerlauf" Field="@nameof(ModelVerlauf.Anzahl)" />
                </Columns>
            </MudDataGrid>
            <div >
                <MudButton Class="mud-theme-tertiary py-4 px-6 mx-4 rounded-b-xl" OnClick="@DownloadFileFromStream" StartIcon="@Icons.Filled.Download" Label="Verlauf Herunterladen" Style="margin-right: 400px; margin-bottom:10px; margin-top: 5px;" />
            </div>
        </td>
    </tr>
</table>

@code {
    static CashRegisterContextDB context = new CashRegisterContextDB();
    VerlaufDAL verlaufData = new VerlaufDAL(context);
    List<ModelVerlauf> verlaufList = new List<ModelVerlauf>();
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    PrintService printService = new PrintService(context);

    private int containerContent = 1;

    protected override void OnInitialized()
    {
        ChooseTableItems(1);    
    }

    string ChooseTableItems(int containerContent)
    {
        this.containerContent = containerContent;
    @switch (containerContent)
        {
            case 1:
                verlaufList.Clear();
                verlaufList = CreateVerlaufList(containerContent);
                break;

            case 2:
                verlaufList.Clear();
                verlaufList = CreateVerlaufList(containerContent);
                break;

            case 3:
                verlaufList.Clear();
                verlaufList = CreateVerlaufList(containerContent);
                break;
        }
        return "";
    }

    //Kann man in eine Andere Klasse tun und nicht hier ist nur temporär (Einkaufsposition Klasse) 
    int ZwischenPreis(int Anzahl, int Preis)
    {
        int Ergebniss = Preis * Anzahl;
        return Ergebniss;
    }

    //Kann man in eine Andere Klasse tun und nicht hier ist nur temporär
    int GesamtPreis()
    {
        int Ergebniss = 0;
        return Ergebniss;
    }

    public List<ModelVerlauf> CreateVerlaufList(int containerContent)
    {
        if (containerContent == 1 || containerContent == 2)
        {
            return verlaufData.Create(verlaufData.GetProduktCountMandant(containerContent, _dateRange.Start, _dateRange.End), verlaufList);
        }
        return verlaufData.Create(verlaufData.GetProduktCountAll(_dateRange.Start, _dateRange.End), verlaufList);
    }

    private async Task DownloadFileFromStream()
    {
    @switch (containerContent)
        {
            case 1:
                await FileDownload();
                break;

            case 2:
                await FileDownload();
                break;

            case 3:
                await FileDownload();
                break;
        }
    }

   

    //Excel Download
    private async Task FileDownload()
    {
        string csvString = "Produkt Name;Gesampreis;Anzahl der Produkte;\n";
        foreach (var item in verlaufList)
        {
            csvString = csvString + item.ProduktName + ";" + item.Gesamtpreis + ";" + item.Anzahl + "\n";
        }
        var fileStream = new MemoryStream(Encoding.ASCII.GetBytes(csvString));
        var filename = "Beleg.csv";
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", filename, streamRef);
    }
}


