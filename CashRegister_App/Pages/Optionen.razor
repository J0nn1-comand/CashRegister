@page "/optionen"
@using CashRegister.DAL
@using CashRegister.Models
@using CashRegister_DAL.DataAccessLayer
@using System.Data
@using Microsoft.Win32
@using System.Text
@using System.IO
@inject IJSRuntime JS



<div class="body">

    @*Button zum auswählen ob man ein Produkt löschen, hinzufügen oder ob man Ein Beleg Löschen will*@

    <MudTabs  Elevation="2" Rounded="true" Centered="true">
        <MudTabPanel OnClick="@(e => ButtonOverlay(1))" Icon="@Icons.Filled.AddCircleOutline" Text="Produkt Hinzufügen" />
        <MudTabPanel OnClick="@(e => ButtonOverlay(2))" Icon="@Icons.Filled.RemoveCircleOutline" Text="Produkt Löschen" />
        <MudTabPanel OnClick="@(e => ButtonOverlay(3))" Icon="@Icons.Outlined.AutoDelete" Text="Beleg Löschen" />
    </MudTabs>
</div>

<div class="containerBody" >
    
        @switch (containerContent)
        {
            case 1:
            //Produkt Hinzufügen
            //Wenn der Erste Button ausgewählt wird Das erste Case ausgewählt

                //Kategorie funct
                <div class="selectBody">
                    <MudSelect OnOpen="refreshData" @bind-Value="gewaehlteKategorie" Label="Kategorie" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var kategorie in kategorieen)
                        {
                            <MudSelectItem Value="@kategorie">@kategorie.KategorieName</MudSelectItem>
                        }
                    </MudSelect>
                </div>

                        //Name
                <div class="textBoxBody">
                    <MudTextField @bind-Value="@_produktNamePlace" Label="Produkt Name" Variant="Variant.Filled" Adornment="Adornment.Start" Immediate="true" v></MudTextField>
                </div>

                //PreisArt
                <div class="radioButtonBody">
                    <MudRadioGroup @bind-SelectedOption="@SelectedOption">
                        <MudRadio Option="true" Color="Color.Primary">CHF/Stk</MudRadio>
                        <MudRadio Option="false" Color="Color.Primary">CHF/Kg</MudRadio>
                    </MudRadioGroup>
                </div>

                //Preis
                <div class="textBoxBody">
                    <MudTextField @bind-Value="@_produktPreisPlace" Label="Produkt Preis" Variant="Variant.Filled" Adornment="Adornment.Start" Immediate="true"></MudTextField>
                </div>

                //Add Button

                <MudFab OnClick="@CreateProdukt" Label="Produkt Hinzufügen" Style="margin-top: 50px;" />

                break;

            case 2:
            //Produkt Löschen
            //Wenn der Zweite Button ausgewählt wird Das Zweite Case ausgewählt
            
                //Datagrid erstellen
                <MudDataGrid Style="width: 100%; margin-top: 10px;" T="Produkt" Items="@Produkte" MultiSelection="true" SelectedItemsChanged="@SelectedItemsChanged" Virtualize="true" Height="600px" QuickFilter="@_quickFilter">
                    
                    @*Im DataGrid Header wird eine Searchbar erstellt mir einer Such Funktion*@
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Produkte</MudText>
                        <MudSpacer/>
                        @*Textfeld mit Such Funktion*@
                        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
                    </ToolBarContent>

                    @*Die Einzelnen Spalten von Von Produkt werden erstellt*@
                    <Columns>
                        @*Checkbox Spalte*@
                        <SelectColumn Class="color9" T="Produkt" />

                        <Column  T="Produkt" Field="@nameof(Produkt.Id)" />
                        <Column  T="Produkt" Field="@nameof(Produkt.Name)" />
                        <Column  T="Produkt" Field="@nameof(Produkt.Preis)" />
                    </Columns>
                </MudDataGrid>

                @*Wenn der Button geddrückt wird werden alle ausgwählten Produkte gelöscht*@
            <MudFab OnClick="@(e => ShowMessagebox(false))" Label="Produkt Löschen" Style="margin-left: 88%; margin-top: 10px;height: 50px; width:200px;" />
                break;

            case 3:
            //Beleg Löschen
            //Wenn der Dritte Button ausgewählt wird der Dritte Case ausgewählt
                
                //Datagrid wird erstellt und alle Belege werden reingeladen
                <MudDataGrid Style="width: 100%; margin-top: 10px;" Items="@GetBelegeByDate()" Virtualize="true" Height="600px">

                    @*Such Funktion (Siehe Case: 2)*@
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Belege</MudText>
                        <MudSpacer />
                        @*In der Toolbar ist noch ein Datepicker wo man ein Zeitraum(von bis) auswählen kann*@
                        <MudDateRangePicker Label="Basic range picker" @bind-DateRange="_dateRange" />
                    </ToolBarContent>

                    <Columns>
                        <Column T="Beleg" Field="@nameof(Beleg.Belegnummer)"/>
                        <Column T="Beleg" Field="@nameof(Beleg.Kaufdatum)" />
                        <Column T="Beleg" Field="@nameof(Beleg.Gesamtpreis)" />
                    </Columns>
                </MudDataGrid>

                //Alle Belege in dem ausgwählten zeitraum werden gelöscht
            <MudFab OnClick="@(e => ShowMessagebox(true))" Label="Beleg Löschen" Style="margin-left: 88%; margin-top: 10px;height: 50px; width:200px;" />
           
                break;
        }
    
</div>

@*MessageBox ob man wirklich die Belege löschen will*@
<MudMessageBox @ref="Belegbox" Title="Beleg Löschen?" CancelText="Abbrechen">
    <MessageContent>
        Sicher das du <b><i>alle</i></b> belege in dem ausgewählten Zeitraum löschen willst?  
    </MessageContent>
    <YesButton>
        <MudButton OnClick="deleteBelege" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Löschen!</MudButton>
    </YesButton>
</MudMessageBox>

@*MessageBox ob man wirklich das Produkt löschen will*@
<MudMessageBox @ref="Produktbox" Title="Produkt Löschen?" CancelText="Abbrechen">
    <MessageContent>
        Sicher das du das augewählte Produkt Löschen willst?
    </MessageContent>
    <YesButton>
        <MudButton OnClick="deleteProdukt" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Löschen!</MudButton>
    </YesButton>
</MudMessageBox>

@*MessageBox ob man wirklich das Produkt löschen will*@
<MudMessageBox @ref="ProduktboxError" Title="Produkt Löschen?" CancelText="Abbrechen">
    <MessageContent>
        Um die ausgewählten Produkte zu löschen musst du erst Allee Belege löschen?
    </MessageContent>
</MudMessageBox>



@code {
    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    static CashRegisterContextDB context = new CashRegisterContextDB();
    ProduktDAL produktData = new ProduktDAL(context);
    HashSet<Produkt> selectedProdukt = new HashSet<Produkt>();
    List<Produkt> Produkte = context.Produkt.ToList();
    List<Kategorie> kategorieen = new List<Kategorie>();
    Kategorie gewaehlteKategorie;

    MudMessageBox Belegbox { get; set; }
    MudMessageBox Produktbox { get; set; }
    MudMessageBox ProduktboxError { get; set; }

    public List<Beleg> GetBelegeByDate()
    {
        return context.Beleg.Where(x => x.Kaufdatum >= _dateRange.Start && x.Kaufdatum <= _dateRange.End).ToList();
    }

    bool SelectedOption { get; set; }
    decimal _produktPreisPlace { get; set; }
    string _produktNamePlace { get; set; }
    private string _searchString;
    private int containerContent = 1;

    //Produkt Erstellen
    public void CreateProdukt()
    {
        produktData.Create(_produktNamePlace, _produktPreisPlace, SelectedOption, gewaehlteKategorie);
        context.SaveChanges();
    }

    //Produkt Löschen
    void deleteProdukt()
    {
        List<Beleg> belegList = new List<Beleg>();
        List<EinkaufsPosition> einkaufList = new List<EinkaufsPosition>();

        //Löscht alle belege wo die Einkaufspositionen der Ausgewählten Produkte übereinstimmt
        foreach (Produkt produkt in selectedProdukt)
        {
            foreach (EinkaufsPosition item in produkt.EinkaufsPositionen)
            {
                context.Remove(item.Beleg);
            }
        }
        context.RemoveRange(belegList);
        context.RemoveRange(selectedProdukt);
        context.SaveChanges();
        refreshData();
    }

    //Beleg Löschen
    void deleteBelege()
    {
        context.RemoveRange(GetBelegeByDate());
        context.SaveChanges();
        refreshData();
    }

    //Refresh Database Data
    private void refreshData()
    {
        selectedProdukt.Clear();
        kategorieen = context.Kategorie.ToList();
        Produkte = context.Produkt.ToList();
    }

    //Show Messagebox
    private async void ShowMessagebox(bool istBeleg)
    {
        //wenn man Beleg löschen will wird die messagbox für den Beleg angezeigt, sonst wird die messagebox für die Produkte angezeigt
        if(istBeleg)
        {
            bool? result = await Belegbox.Show();
        }
        else
        {
            //If (selectedProdukt.All<Produkt>(produkt => { return produkt.EinkaufsPositionen.Count == 0;  }))
            if (darfIchLoeschen())
            {
                bool? result = await Produktbox.Show();
            }
            else
            {
                bool? result = await ProduktboxError.Show();
            }
        }
    }

    public Boolean darfIchLoeschen() {
        foreach(Produkt produkt in selectedProdukt) {
            if (produkt.EinkaufsPositionen.Count() > 0) {
                return false;
            }
        }
        return true;
    }

    //Button Case auswählen
    public void ButtonOverlay(int i)
    {
        containerContent = i;
    }

    //Searchbar Funktion für Produkte
    private Func<Produkt, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Id}".Contains(_searchString))
            return true;

        return false;
    };

    void SelectedItemsChanged(HashSet<Produkt> items)
    {
        selectedProdukt = items;
    }
}
